// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OtpType {
  registration
  reset
}

enum FlowLevel {
  spotting
  light
  medium
  heavy
}

enum PhaseType {
  menstruation
  follicular
  ovulation
  luteal
}

enum IrregularityType {
  short_cycle
  long_cycle
  missed_period
  heavy_flow
  light_flow
  other
}

model User {
  id                       Int        @id() @default(autoincrement())
  name                     String     @db.VarChar()
  email                    String     @unique @db.VarChar(191)
  phone_number             String     @unique @db.VarChar(15)
  password                 String 
  role                     Role
  avg_cycle_length         Int? // e.g., 28
  avg_period_length        Int? // e.g., 5
  created_at               DateTime   @default(now())
  updated_at               DateTime   @updatedAt

  otp                      Otp[]
  cycle                    Cycle[]
  irregularity             Irregularity[]

  @@map("users")
}

model Otp {
  id         Int      @id @default(autoincrement())
  user_id    Int
  otp        String   @db.VarChar(6)
  type       OtpType
  expiresAt  DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("otps")
}

model Cycle {
  id                          Int                  @id @default(autoincrement())
  user_id                     Int
  start_date                  DateTime
  predicted_start_date        DateTime
  end_date                    DateTime?
  predicted_end_date          DateTime
  description                 String?
  created_at                  DateTime            @default(now())
  updated_at                  DateTime            @updatedAt 

  user                        User                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  period_days                 PeriodDay[]
  irregularity                Irregularity[]
  phases                      Phase[]

  @@map("cycles")
}

model Phase {
  id                       Int      @id @default(autoincrement())
  cycle_id                 Int
  type                     PhaseType
  start_date               DateTime
  end_date                 DateTime
  description              String?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  cycle                    Cycle    @relation(fields: [cycle_id], references: [id], onDelete: Cascade)

  @@map("phases")
}

model PeriodDay {
  id                       Int      @id @default(autoincrement())
  cycle_id                 Int
  user_id                  Int
  date                     DateTime
  flow_level               FlowLevel
  description              String?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  cycle                    Cycle    @relation(fields: [cycle_id], references: [id], onDelete: Cascade)

  @@map("period_days")
}

model Irregularity {
  id                       Int      @id @default(autoincrement())
  user_id                  Int
  cycle_id                 Int
  irregularity_type        IrregularityType
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  user                     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cycle                    Cycle    @relation(fields: [cycle_id], references: [id], onDelete: Cascade)

  gynecologists            IrregularitiesGynecologist[]

  @@map("irregularities")
}

model Gynecologist {
  id                      Int     @id @default(autoincrement())
  name                    String
  address                 String
  distance                Decimal
  phone                   String?
  specialty               String
  latitude                Decimal
  longitude               Decimal
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  irregularities          IrregularitiesGynecologist[]


  @@map("gynecologists")
}

model IrregularitiesGynecologist {
  id                      Int     @id @default(autoincrement())
  irregularity_id         Int
  gynecologist_id         Int
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  irregularity            Irregularity @relation(fields: [irregularity_id], references: [id], onDelete: Cascade)
  gynecologist            Gynecologist @relation(fields: [gynecologist_id], references: [id], onDelete: Cascade)

  @@map("irregularities_gynecologists")
}